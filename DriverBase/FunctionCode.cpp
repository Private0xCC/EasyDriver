#include "FunctionCode.h"

#define MAJORFUNCTION(mj,pmn) {mj,#mj,sizeof(pmn)/sizeof((pmn)[0]),pmn}
#define MAJORFUNCTION_NO_MN(mj) {mj,#mj,(UCHAR)-1,nullptr}
#define MINORFUNCTION(mj,mn) {(MajorFunction::_MajorFunctions+mj),mn,#mn}
#define MINORFUNCTION_PNP(mn) {(MajorFunction::_MajorFunctions+IRP_MJ_PNP),mn,#mn}

MajorFunction MajorFunction::_MajorFunctions[IRP_MJ_MAXIMUM_FUNCTION + 1] = {
	MAJORFUNCTION_NO_MN(IRP_MJ_CREATE),
	MAJORFUNCTION_NO_MN(IRP_MJ_CREATE_NAMED_PIPE),
	MAJORFUNCTION_NO_MN(IRP_MJ_CLOSE),
	MAJORFUNCTION_NO_MN(IRP_MJ_READ),
	MAJORFUNCTION_NO_MN(IRP_MJ_WRITE),
	MAJORFUNCTION_NO_MN(IRP_MJ_QUERY_INFORMATION),
	MAJORFUNCTION_NO_MN(IRP_MJ_SET_INFORMATION),
	MAJORFUNCTION_NO_MN(IRP_MJ_QUERY_EA),
	MAJORFUNCTION_NO_MN(IRP_MJ_SET_EA),
	MAJORFUNCTION_NO_MN(IRP_MJ_FLUSH_BUFFERS),
	MAJORFUNCTION_NO_MN(IRP_MJ_QUERY_VOLUME_INFORMATION),
	MAJORFUNCTION_NO_MN(IRP_MJ_SET_VOLUME_INFORMATION),
	MAJORFUNCTION_NO_MN(IRP_MJ_DIRECTORY_CONTROL),
	MAJORFUNCTION_NO_MN(IRP_MJ_FILE_SYSTEM_CONTROL),
	MAJORFUNCTION_NO_MN(IRP_MJ_DEVICE_CONTROL),
	MAJORFUNCTION_NO_MN(IRP_MJ_INTERNAL_DEVICE_CONTROL),
	MAJORFUNCTION_NO_MN(IRP_MJ_SHUTDOWN),
	MAJORFUNCTION_NO_MN(IRP_MJ_LOCK_CONTROL),
	MAJORFUNCTION_NO_MN(IRP_MJ_CLEANUP),
	MAJORFUNCTION_NO_MN(IRP_MJ_CREATE_MAILSLOT),
	MAJORFUNCTION_NO_MN(IRP_MJ_QUERY_SECURITY),
	MAJORFUNCTION_NO_MN(IRP_MJ_SET_SECURITY),
	MAJORFUNCTION_NO_MN(IRP_MJ_POWER),
	MAJORFUNCTION_NO_MN(IRP_MJ_SYSTEM_CONTROL),
	MAJORFUNCTION_NO_MN(IRP_MJ_DEVICE_CHANGE),
	MAJORFUNCTION_NO_MN(IRP_MJ_QUERY_QUOTA),
	MAJORFUNCTION_NO_MN(IRP_MJ_SET_QUOTA),
	MAJORFUNCTION(IRP_MJ_PNP,MinorFunction::_PNP)
};

MinorFunction MinorFunction::_PNP[IRP_MN_DEVICE_ENUMERATED + 1] = {
	MINORFUNCTION_PNP(IRP_MN_START_DEVICE),
	MINORFUNCTION_PNP(IRP_MN_QUERY_REMOVE_DEVICE),
	MINORFUNCTION_PNP(IRP_MN_REMOVE_DEVICE),
	MINORFUNCTION_PNP(IRP_MN_CANCEL_REMOVE_DEVICE),
	MINORFUNCTION_PNP(IRP_MN_STOP_DEVICE),	
	MINORFUNCTION_PNP(IRP_MN_QUERY_STOP_DEVICE),
	MINORFUNCTION_PNP(IRP_MN_CANCEL_STOP_DEVICE),
	MINORFUNCTION_PNP(IRP_MN_QUERY_DEVICE_RELATIONS),
	MINORFUNCTION_PNP(IRP_MN_QUERY_INTERFACE),
	MINORFUNCTION_PNP(IRP_MN_QUERY_CAPABILITIES),
	MINORFUNCTION_PNP(IRP_MN_QUERY_RESOURCES),
	MINORFUNCTION_PNP(IRP_MN_QUERY_RESOURCE_REQUIREMENTS),
	MINORFUNCTION_PNP(IRP_MN_QUERY_DEVICE_TEXT),
	MINORFUNCTION_PNP(IRP_MN_FILTER_RESOURCE_REQUIREMENTS),
#define IRP_PNP_MN_UNKNOW_0x0E 0x0E
	MINORFUNCTION_PNP(IRP_PNP_MN_UNKNOW_0x0E),
	MINORFUNCTION_PNP(IRP_MN_READ_CONFIG),
	MINORFUNCTION_PNP(IRP_MN_WRITE_CONFIG),
	MINORFUNCTION_PNP(IRP_MN_EJECT),
	MINORFUNCTION_PNP(IRP_MN_SET_LOCK),
	MINORFUNCTION_PNP(IRP_MN_QUERY_ID),
	MINORFUNCTION_PNP(IRP_MN_QUERY_PNP_DEVICE_STATE),
	MINORFUNCTION_PNP(IRP_MN_QUERY_BUS_INFORMATION),
	MINORFUNCTION_PNP(IRP_MN_DEVICE_USAGE_NOTIFICATION),
	MINORFUNCTION_PNP(IRP_MN_SURPRISE_REMOVAL),
#define IRP_PNP_MN_UNKNOW_0x18 0x18
	MINORFUNCTION_PNP(IRP_PNP_MN_UNKNOW_0x18),
	MINORFUNCTION_PNP(IRP_MN_DEVICE_ENUMERATED)
};

void GetFunctionName(PCCHAR* mjName, PCCHAR* mnName, UCHAR mj, UCHAR mn)
{
	if (mj > IRP_MJ_MAXIMUM_FUNCTION)
	{
		if (mjName)
		{
			*mjName = nullptr;
		}
		if (mnName)
		{
			*mnName = nullptr;
		}
	}
	else
	{
		MajorFunction& mjFunction = MajorFunction::_MajorFunctions[mj];
		if (mjName)
		{
			*mjName = mjFunction.MajorFunctionName;
		}
		if (mnName)
		{
			if (mjFunction.MaxMinorFunctionCode >= mn && mjFunction.MaxMinorFunctionCode!=(UCHAR)-1)
			{
				*mnName = mjFunction.MinorFunctions[mn].MinorFunctionName;
			}
			else
			{
				*mnName = nullptr;
			}
		}
	}
}
